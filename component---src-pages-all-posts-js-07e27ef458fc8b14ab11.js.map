{"version":3,"sources":["webpack:///./src/pages/all-posts.js","webpack:///./src/views/layouts/ArticleLayout.js","webpack:///./src/components/PostListing/index.jsx"],"names":["AllPosts","render","postEdges","this","props","data","allMarkdownRemark","edges","className","title","config","siteTitle","pageTitle","Component","pageQuery","ArticleLayout","children","maxWidth","margin","padding","xs","sm","PostListing","getPostList","postList","limit","forEach","postEdge","index","push","path","node","fields","slug","tags","frontmatter","cover","date","excerpt","timeToRead","language","splice","mx","flexWrap","map","post","key","width","px","py","to","React"],"mappings":"0PAQMA,E,gLACJC,OAAA,WACE,IAAMC,EAAYC,KAAKC,MAAMC,KAAKC,kBAAkBC,MACpD,OACE,kBAAC,IAAD,KACE,yBAAKC,UAAU,mBACb,kBAAC,IAAD,CAAQC,MAAOC,IAAOC,YACtB,kBAAC,IAAD,CAAKC,UAAU,aACf,kBAAC,IAAD,CAAaV,UAAWA,O,GARXW,aAeRb,YAGR,IAAMc,EAAS,c,+LCvBtB,IAMeC,EANO,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAaZ,E,oIAAhB,wBACpB,kBAAC,IAAD,eAAKa,SAAU,IAAKC,OAAO,SAASC,QAAS,CAAEC,GAAI,EAAGC,GAAI,IAASjB,GAChEY,I,oGCDCM,E,wLACJC,YAAA,WACE,IAAIC,EAAW,GACTC,EAAQtB,KAAKC,MAAMqB,MAgBzB,OAfAtB,KAAKC,MAAMF,UAAUwB,SAAQ,SAACC,EAAUC,GACtCJ,EAASK,KAAK,CACZC,KAAMH,EAASI,KAAKC,OAAOC,KAC3BC,KAAMP,EAASI,KAAKI,YAAYD,KAChCE,MAAOT,EAASI,KAAKI,YAAYC,MACjC3B,MAAOkB,EAASI,KAAKI,YAAY1B,MACjC4B,KAAMV,EAASI,KAAKC,OAAOK,KAC3BC,QAASX,EAASI,KAAKO,QACvBC,WAAYZ,EAASI,KAAKQ,WAC1BC,SAAUb,EAASI,KAAKI,YAAYK,cAGpCf,IACFD,EAAWA,EAASiB,OAAO,EAAGhB,IAEzBD,G,EAGTvB,OAAA,WACE,IAAMuB,EAAWrB,KAAKoB,cAEtB,OACE,kBAAC,IAAD,CAAKN,SAAU,IAAKC,OAAO,UACzB,kBAAC,IAAD,CAAMwB,GAAI,CAAC,GAAI,GAAIC,SAAS,QAE1BnB,EAASoB,KAAI,SAAAC,GAAI,OACf,kBAAC,IAAD,CAAKC,IAAKD,EAAKpC,MAAOsC,MAAO,CAAC,EAAG,EAAI,GAAIC,GAAI,EAAGC,GAAI,GAClD,kBAAC,OAAD,CAAMC,GAAIL,EAAKf,MACb,kBAAC,IAAD,CAAaU,SAAUK,EAAKL,UAAWK,EAAKpC,e,GAhClC0C,IAAMtC,WA0CjBS","file":"component---src-pages-all-posts-js-07e27ef458fc8b14ab11.js","sourcesContent":["import React, { Component } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Link, graphql } from 'gatsby';\nimport { MainLayout } from '../views/layouts';\nimport PostListing from '../components/PostListing';\nimport SEO from '../views/components/SEO';\nimport config from '../../data/SiteConfig';\n\nclass AllPosts extends Component {\n  render() {\n    const postEdges = this.props.data.allMarkdownRemark.edges;\n    return (\n      <MainLayout>\n        <div className=\"index-container\">\n          <Helmet title={config.siteTitle} />\n          <SEO pageTitle=\"লেখাসমূহ\" />\n          <PostListing postEdges={postEdges} />\n        </div>\n      </MainLayout>\n    );\n  }\n}\n\nexport default AllPosts;\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query AllPostsQuery {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [fields___date], order: DESC }\n      filter: { frontmatter: { published: { eq: true } } }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            date\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            cover\n            date\n            language\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport { Box } from '../components';\n\nconst ArticleLayout = ({ children, ...props }) => (\n  <Box maxWidth={960} margin=\"0 auto\" padding={{ xs: 3, sm: 4 }} {...props}>\n    {children}\n  </Box>\n);\n\nexport default ArticleLayout;\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport { SummaryCard, Box, Flex } from '../../views/components';\n\nclass PostListing extends React.Component {\n  getPostList() {\n    let postList = [];\n    const limit = this.props.limit;\n    this.props.postEdges.forEach((postEdge, index) => {\n      postList.push({\n        path: postEdge.node.fields.slug,\n        tags: postEdge.node.frontmatter.tags,\n        cover: postEdge.node.frontmatter.cover,\n        title: postEdge.node.frontmatter.title,\n        date: postEdge.node.fields.date,\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead,\n        language: postEdge.node.frontmatter.language,\n      });\n    });\n    if (limit) {\n      postList = postList.splice(0, limit);\n    }\n    return postList;\n  }\n\n  render() {\n    const postList = this.getPostList();\n\n    return (\n      <Box maxWidth={960} margin=\"0 auto\">\n        <Flex mx={[0, -2]} flexWrap=\"wrap\">\n          {/* Your post list here. */\n          postList.map(post => (\n            <Box key={post.title} width={[1, 1 / 3]} px={3} py={3}>\n              <Link to={post.path}>\n                <SummaryCard language={post.language}>{post.title}</SummaryCard>\n              </Link>\n            </Box>\n          ))}\n        </Flex>\n      </Box>\n    );\n  }\n}\n\nexport default PostListing;\n"],"sourceRoot":""}