{"version":3,"sources":["webpack:///./src/templates/Tag/index.jsx","webpack:///./src/views/layouts/MainLayout.js","webpack:///./src/views/layouts/ArticleLayout.js","webpack:///./src/components/PostListing/index.jsx"],"names":["TagTemplate","render","tag","this","props","pageContext","postEdges","data","allMarkdownRemark","edges","className","title","config","siteTitle","React","Component","pageQuery","MainLayout","children","theme","dark","name","content","siteDescription","ArticleLayout","maxWidth","margin","padding","xs","sm","PostListing","getPostList","postList","limit","forEach","postEdge","index","push","path","node","fields","slug","tags","frontmatter","cover","date","excerpt","timeToRead","language","splice","mx","flexWrap","map","post","key","width","px","py","to"],"mappings":"2QAOqBA,E,gLACnBC,OAAA,WAAU,IACAC,EAAQC,KAAKC,MAAMC,YAAnBH,IACFI,EAAYH,KAAKC,MAAMG,KAAKC,kBAAkBC,MACpD,OACE,kBAAC,IAAD,KACE,yBAAKC,UAAU,iBACb,kBAAC,IAAD,CAAQC,MAAK,oBAAsBT,EAAtB,OAAgCU,IAAOC,YACpD,kBAAC,IAAD,CAAaP,UAAWA,O,GAROQ,IAAMC,WAgBlCC,EAAS,c,4JCdhBC,E,gLACJhB,OAAA,WAAU,IACAiB,EAAaf,KAAKC,MAAlBc,SACR,OACE,kBAAC,IAAD,CAAeC,MAAOC,KACpB,kBAAC,IAAD,MACA,oCACE,kBAAC,IAAD,KACE,0BAAMC,KAAK,cAAcC,QAASV,IAAOW,mBAE3C,kBAAC,IAAD,MACCL,EACD,kBAAC,IAAD,S,GAZeH,aAmBVE,O,+LCzBf,IAMeO,EANO,SAAC,GAAD,IAAGN,EAAH,EAAGA,SAAad,E,oIAAhB,wBACpB,kBAAC,IAAD,eAAKqB,SAAU,IAAKC,OAAO,SAASC,QAAS,CAAEC,GAAI,EAAGC,GAAI,IAASzB,GAChEc,I,oGCDCY,E,wLACJC,YAAA,WACE,IAAIC,EAAW,GACTC,EAAQ9B,KAAKC,MAAM6B,MAgBzB,OAfA9B,KAAKC,MAAME,UAAU4B,SAAQ,SAACC,EAAUC,GACtCJ,EAASK,KAAK,CACZC,KAAMH,EAASI,KAAKC,OAAOC,KAC3BC,KAAMP,EAASI,KAAKI,YAAYD,KAChCE,MAAOT,EAASI,KAAKI,YAAYC,MACjCjC,MAAOwB,EAASI,KAAKI,YAAYhC,MACjCkC,KAAMV,EAASI,KAAKC,OAAOK,KAC3BC,QAASX,EAASI,KAAKO,QACvBC,WAAYZ,EAASI,KAAKQ,WAC1BC,SAAUb,EAASI,KAAKI,YAAYK,cAGpCf,IACFD,EAAWA,EAASiB,OAAO,EAAGhB,IAEzBD,G,EAGT/B,OAAA,WACE,IAAM+B,EAAW7B,KAAK4B,cAEtB,OACE,kBAAC,IAAD,CAAMmB,GAAI,CAAC,GAAI,GAAIC,SAAS,QAGxBnB,EAASoB,KAAI,SAACC,GAAD,OACX,kBAAC,IAAD,CAAKC,IAAKD,EAAK1C,MAAO4C,MAAO,CAAC,EAAG,EAAI,GAAIC,GAAI,EAAGC,GAAI,GAClD,kBAAC,OAAD,CAAMC,GAAIL,EAAKf,MACb,kBAAC,IAAD,CAAaU,SAAUK,EAAKL,UAAWK,EAAK1C,c,GAhClCG,IAAMC,WA0CjBe","file":"component---src-templates-tag-index-jsx-668f8fde33422d50245f.js","sourcesContent":["import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { graphql } from 'gatsby';\nimport { MainLayout } from '../../views/layouts';\nimport PostListing from '../../components/PostListing';\nimport config from '../../../data/SiteConfig';\n\nexport default class TagTemplate extends React.Component {\n  render() {\n    const { tag } = this.props.pageContext;\n    const postEdges = this.props.data.allMarkdownRemark.edges;\n    return (\n      <MainLayout>\n        <div className=\"tag-container\">\n          <Helmet title={`Posts tagged as \"${tag}\" | ${config.siteTitle}`} />\n          <PostListing postEdges={postEdges} />\n        </div>\n      </MainLayout>\n    );\n  }\n}\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query TagPage($tag: String) {\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [fields___date], order: DESC }\n      filter: { frontmatter: { published: { eq: true }, tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n            date\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            cover\n            date\n          }\n        }\n      }\n    }\n  }\n`;\n","import React, { Component } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { ThemeProvider } from 'styled-components';\nimport { dark, light } from '../../views/styles/themes';\nimport { Link } from 'gatsby';\nimport config from '../../../data/SiteConfig';\nimport GlobalStyle from '../../views/styles/GlobalStyles';\nimport { Footer, MainMenu, Text } from '../../views/components';\n\nclass MainLayout extends Component {\n  render() {\n    const { children } = this.props;\n    return (\n      <ThemeProvider theme={dark}>\n        <GlobalStyle />\n        <>\n          <Helmet>\n            <meta name=\"description\" content={config.siteDescription} />\n          </Helmet>\n          <MainMenu />\n          {children}\n          <Footer />\n        </>\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default MainLayout;\n","import React from 'react';\nimport { Box } from '../components';\n\nconst ArticleLayout = ({ children, ...props }) => (\n  <Box maxWidth={960} margin=\"0 auto\" padding={{ xs: 3, sm: 4 }} {...props}>\n    {children}\n  </Box>\n);\n\nexport default ArticleLayout;\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport { SummaryCard, Box, Flex } from '../../views/components';\n\nclass PostListing extends React.Component {\n  getPostList() {\n    let postList = [];\n    const limit = this.props.limit;\n    this.props.postEdges.forEach((postEdge, index) => {\n      postList.push({\n        path: postEdge.node.fields.slug,\n        tags: postEdge.node.frontmatter.tags,\n        cover: postEdge.node.frontmatter.cover,\n        title: postEdge.node.frontmatter.title,\n        date: postEdge.node.fields.date,\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead,\n        language: postEdge.node.frontmatter.language,\n      });\n    });\n    if (limit) {\n      postList = postList.splice(0, limit);\n    }\n    return postList;\n  }\n\n  render() {\n    const postList = this.getPostList();\n\n    return (\n      <Flex mx={[0, -2]} flexWrap=\"wrap\">\n        {\n          /* Your post list here. */\n          postList.map((post) => (\n            <Box key={post.title} width={[1, 1 / 3]} px={3} py={3}>\n              <Link to={post.path}>\n                <SummaryCard language={post.language}>{post.title}</SummaryCard>\n              </Link>\n            </Box>\n          ))\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default PostListing;\n"],"sourceRoot":""}