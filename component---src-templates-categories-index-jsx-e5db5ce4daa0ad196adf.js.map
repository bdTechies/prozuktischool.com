{"version":3,"sources":["webpack:///./src/templates/Categories/index.jsx","webpack:///./src/views/layouts/ArticleLayout.js","webpack:///./src/components/PostListing/index.jsx"],"names":["CategoryTemplate","render","category","this","props","pageContext","postEdges","data","allMarkdownRemark","edges","className","title","config","siteTitle","React","Component","pageQuery","ArticleLayout","children","maxWidth","margin","padding","xs","sm","PostListing","getPostList","postList","limit","forEach","postEdge","index","push","path","node","fields","slug","tags","frontmatter","cover","date","excerpt","timeToRead","language","splice","mx","flexWrap","map","post","key","width","px","py","to"],"mappings":"4QAOqBA,E,gLACnBC,OAAA,WAAU,IACAC,EAAaC,KAAKC,MAAMC,YAAxBH,SACFI,EAAYH,KAAKC,MAAMG,KAAKC,kBAAkBC,MACpD,OACE,kBAAC,IAAD,KACE,yBAAKC,UAAU,sBACb,kBAAC,IAAD,CACEC,MAAK,sBAAwBT,EAAxB,OAAuCU,IAAOC,YAErD,kBAAC,IAAD,CAAaP,UAAWA,O,GAVYQ,IAAMC,WAkBvCC,EAAS,c,+LCtBtB,IAMeC,EANO,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAad,E,oIAAhB,wBACpB,kBAAC,IAAD,eAAKe,SAAU,IAAKC,OAAO,SAASC,QAAS,CAAEC,GAAI,EAAGC,GAAI,IAASnB,GAChEc,I,oGCDCM,E,wLACJC,YAAA,WACE,IAAIC,EAAW,GACTC,EAAQxB,KAAKC,MAAMuB,MAgBzB,OAfAxB,KAAKC,MAAME,UAAUsB,SAAQ,SAACC,EAAUC,GACtCJ,EAASK,KAAK,CACZC,KAAMH,EAASI,KAAKC,OAAOC,KAC3BC,KAAMP,EAASI,KAAKI,YAAYD,KAChCE,MAAOT,EAASI,KAAKI,YAAYC,MACjC3B,MAAOkB,EAASI,KAAKI,YAAY1B,MACjC4B,KAAMV,EAASI,KAAKC,OAAOK,KAC3BC,QAASX,EAASI,KAAKO,QACvBC,WAAYZ,EAASI,KAAKQ,WAC1BC,SAAUb,EAASI,KAAKI,YAAYK,cAGpCf,IACFD,EAAWA,EAASiB,OAAO,EAAGhB,IAEzBD,G,EAGTzB,OAAA,WACE,IAAMyB,EAAWvB,KAAKsB,cAEtB,OACE,kBAAC,IAAD,CAAKN,SAAU,IAAKC,OAAO,UACzB,kBAAC,IAAD,CAAMwB,GAAI,CAAC,GAAI,GAAIC,SAAS,QAE1BnB,EAASoB,KAAI,SAAAC,GAAI,OACf,kBAAC,IAAD,CAAKC,IAAKD,EAAKpC,MAAOsC,MAAO,CAAC,EAAG,EAAI,GAAIC,GAAI,EAAGC,GAAI,GAClD,kBAAC,OAAD,CAAMC,GAAIL,EAAKf,MACb,kBAAC,IAAD,CAAaU,SAAUK,EAAKL,UAAWK,EAAKpC,e,GAhClCG,IAAMC,WA0CjBS","file":"component---src-templates-categories-index-jsx-e5db5ce4daa0ad196adf.js","sourcesContent":["import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { graphql } from 'gatsby';\nimport { MainLayout } from '../../views/layouts';\nimport PostListing from '../../components/PostListing';\nimport config from '../../../data/SiteConfig';\n\nexport default class CategoryTemplate extends React.Component {\n  render() {\n    const { category } = this.props.pageContext;\n    const postEdges = this.props.data.allMarkdownRemark.edges;\n    return (\n      <MainLayout>\n        <div className=\"category-container\">\n          <Helmet\n            title={`Posts in category \"${category}\" | ${config.siteTitle}`}\n          />\n          <PostListing postEdges={postEdges} />\n        </div>\n      </MainLayout>\n    );\n  }\n}\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query CategoryPage($category: String) {\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [fields___date], order: DESC }\n      filter: {\n        frontmatter: {\n          published: { eq: true }\n          categories: { in: [$category] }\n        }\n      }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n            date\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            categories\n            cover\n            date\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport { Box } from '../components';\n\nconst ArticleLayout = ({ children, ...props }) => (\n  <Box maxWidth={960} margin=\"0 auto\" padding={{ xs: 3, sm: 4 }} {...props}>\n    {children}\n  </Box>\n);\n\nexport default ArticleLayout;\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport { SummaryCard, Box, Flex } from '../../views/components';\n\nclass PostListing extends React.Component {\n  getPostList() {\n    let postList = [];\n    const limit = this.props.limit;\n    this.props.postEdges.forEach((postEdge, index) => {\n      postList.push({\n        path: postEdge.node.fields.slug,\n        tags: postEdge.node.frontmatter.tags,\n        cover: postEdge.node.frontmatter.cover,\n        title: postEdge.node.frontmatter.title,\n        date: postEdge.node.fields.date,\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead,\n        language: postEdge.node.frontmatter.language,\n      });\n    });\n    if (limit) {\n      postList = postList.splice(0, limit);\n    }\n    return postList;\n  }\n\n  render() {\n    const postList = this.getPostList();\n\n    return (\n      <Box maxWidth={960} margin=\"0 auto\">\n        <Flex mx={[0, -2]} flexWrap=\"wrap\">\n          {/* Your post list here. */\n          postList.map(post => (\n            <Box key={post.title} width={[1, 1 / 3]} px={3} py={3}>\n              <Link to={post.path}>\n                <SummaryCard language={post.language}>{post.title}</SummaryCard>\n              </Link>\n            </Box>\n          ))}\n        </Flex>\n      </Box>\n    );\n  }\n}\n\nexport default PostListing;\n"],"sourceRoot":""}